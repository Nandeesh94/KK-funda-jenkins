

Blog url:

https://blog.kkdevops.com/jenkins-scripted-pipeline-a-complete-step-by-step-guide-for-real-ci-cd/


node
{

   echo "git branch name: ${env.BRANCH_NAME}"
   echo "build number is: ${env.BUILD_NUMBER}"
   echo "node name is: ${env.NODE_NAME}"


   // /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven-3.9.9/bin
   def mavenHome=tool name: "maven-3.9.9"
    try
    {

  stage('git checkout')
  {
    notifyBuild('STARTED')
    git branch: 'development', url: 'https://github.com/kkdevopsb5/maven-webapplication-project-kkfunda.git'
  } 

    stage('COMPILE')
  {
    sh "${mavenHome}/bin/mvn clean compile"
  }

  stage('Build')
  {
    sh "${mavenHome}/bin/mvn clean package"
  }

    stage('SQ Report')
  {
    sh "${mavenHome}/bin/mvn sonar:sonar"
  }

      stage('Upload Artifact')
  {

    sh "${mavenHome}/bin/mvn clean deploy"
  }

    stage('Deploy to Tomcat') 
    {
      
      sh """

      curl -u kk:password \
--upload-file /var/lib/jenkins/workspace/jio-scripted-way-PL/target/maven-web-application.war \
"http://3.109.2.100:9090/manager/text/deploy?path=/maven-web-application&update=true"
          
        """
    }

    }  //try ending

    catch (e) {
   
       currentBuild.result = "FAILED"

  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
  
} // node ending


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: '#jio-devteam')
  slackSend (color: colorCode, message: summary, channel: '#jio-devops')
}

---------------------------------------------------------------------------------------------------------------------------


node {
    // Define environment variables
    env.APP_NAME = "jenkins-java-project"
    env.BRANCH_NAME = "main"

    try {
        stage('Checkout') {
            // Checkout from GitHub with credentials
            git branch: env.BRANCH_NAME,
                url: 'https://github.com/Nandeesh94/jenkins-java-project.git',
                credentialsId: 'github-credentials-id'
        }

        stage('Build') {
            // Example: Maven build
            sh '''
                echo "Building ${APP_NAME}..."
                mvn clean package -DskipTests
            '''
            // Archive build artifacts
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }

        stage('Test') {
            // Run tests in parallel (unit + integration)
            parallel (
                UnitTests: {
                    sh 'mvn test -Dtest=*UnitTest'
                },
                IntegrationTests: {
                    sh 'mvn verify -Dtest=*IntegrationTest'
                }
            )
            junit '**/target/surefire-reports/*.xml'
        }

        stage('Quality Checks') {
            // Example: static code analysis
            sh 'mvn checkstyle:check'
        }

        stage('Deploy') {
            // Deploy only if build & tests succeed
            sh '''
                echo "Deploying ${APP_NAME}..."
                # Example: copy JAR to deployment server
                scp target/*.jar user@server:/opt/apps/
            '''
        }
    }
    catch (err) {
        // Handle failures gracefully
        currentBuild.result = 'FAILURE'
        echo "‚ùå Pipeline failed: ${err}"
        throw err
    }
    finally {
        stage('Post Actions') {
            // Always run, even if build fails
            echo "Cleaning up workspace..."
            deleteDir()

            // Notify team (Slack, email, etc.)
            emailext (
                subject: "Jenkins Build: ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                body: "Check console output at ${env.BUILD_URL}",
                to: "dev-team@example.com"
            )
        }
    }
}


