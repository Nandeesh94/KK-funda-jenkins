

Blog url:

https://blog.kkdevops.com/jenkins-scripted-pipeline-a-complete-step-by-step-guide-for-real-ci-cd/




----------------------------------------------------------------------------------------------------------------------------------
if

üõ†Ô∏è Create Jenkins‚Äô Maven Settings
Make the .m2 directory (if it doesn‚Äôt exist yet):
C: mkdir -p /var/lib/jenkins/.m2

Create/Edit settings.xml:
C:nano /var/lib/jenkins/.m2/settings.xml

Paste in your Nexus configuration (minimal, clean version):
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">

  <servers>
    <server>
      <id>nexus</id>
      <username>admin</username>
      <password>90199652</password>
    </server>
  </servers>

</settings>


Set permissions so Jenkins can read it:
C:chown -R jenkins:jenkins /var/lib/jenkins/.m2
C:chmod 600 /var/lib/jenkins/.m2/settings.xml

----------------------------------------------------------------------------------------------------------------------------------
In Tomcat
cd /opt/apache-tomcat-9.0.110/conf
vim tomcat-users.xml

  <role rolename="manager-script"/>
  <role rolename="manager-gui"/>
  <user username="tomcat" password="90199652" roles="manager-gui,manager-script"/>
  <user username="deployer" password="90199652" roles="manager-script"/>






----------------------------------------------------------------------------------------------------------------------------------

node {
    def mavenHome = tool name: 'maven_3.9.11', type:'maven'
    
    
        stage('checkout') {
            git branch: 'deployement', url: 'https://github.com/Nandeesh94/jenkins-java-project.git'
        }
        stage('build') {
            sh "${mavenHome}/bin/mvn clean package"
        }
        stage('sonarqube report') {
            sh "${mavenHome}/bin/mvn clean sonar:sonar"
        }
        stage('upload to nexus') {
            sh "${mavenHome}/bin/mvn clean deploy"
        }
        stage('upload to tomcat') {
            sh """
            curl -u tomcat:90199652 \
            --upload-file /var/lib/jenkins/workspace/jio-declarative-pipeline/target/netflix-clone.war \
            "http://3.129.52.3:8080/manager/text/deploy?path=/netflix-clone&update=true"
            """
        }
       
}    







--------------------------------------------------------------------------------------------------------------------------------


node
{

   echo "git branch name: ${env.BRANCH_NAME}"
   echo "build number is: ${env.BUILD_NUMBER}"
   echo "node name is: ${env.NODE_NAME}"


   // /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven-3.9.9/bin
   def mavenHome=tool name: "maven-3.9.9"
    try
    {

  stage('git checkout')
  {
    notifyBuild('STARTED')
    git branch: 'development', url: 'https://github.com/kkdevopsb5/maven-webapplication-project-kkfunda.git'
  } 

    stage('COMPILE')
  {
    sh "${mavenHome}/bin/mvn clean compile"
  }

  stage('Build')
  {
    sh "${mavenHome}/bin/mvn clean package"
  }

    stage('SQ Report')
  {
    sh "${mavenHome}/bin/mvn sonar:sonar"
  }

      stage('Upload Artifact')
  {

    sh "${mavenHome}/bin/mvn clean deploy"
  }

    stage('Deploy to Tomcat') 
    {
      
      sh """

      curl -u kk:password \
--upload-file /var/lib/jenkins/workspace/jio-scripted-way-PL/target/maven-web-application.war \
"http://3.109.2.100:9090/manager/text/deploy?path=/maven-web-application&update=true"
          
        """
    }

    }  //try ending

    catch (e) {
   
       currentBuild.result = "FAILED"

  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
  
} // node ending


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: '#jio-devteam')
  slackSend (color: colorCode, message: summary, channel: '#jio-devops')
}

---------------------------------------------------------------------------------------------------------------------------


node {
    // Define environment variables
    env.APP_NAME = "jenkins-java-project"
    env.BRANCH_NAME = "main"

    try {
        stage('Checkout') {
            // Checkout from GitHub with credentials
            git branch: env.BRANCH_NAME,
                url: 'https://github.com/Nandeesh94/jenkins-java-project.git',
                credentialsId: 'github-credentials-id'
        }

        stage('Build') {
            // Example: Maven build
            sh '''
                echo "Building ${APP_NAME}..."
                mvn clean package -DskipTests
            '''
            // Archive build artifacts
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }

        stage('Test') {
            // Run tests in parallel (unit + integration)
            parallel (
                UnitTests: {
                    sh 'mvn test -Dtest=*UnitTest'
                },
                IntegrationTests: {
                    sh 'mvn verify -Dtest=*IntegrationTest'
                }
            )
            junit '**/target/surefire-reports/*.xml'
        }

        stage('Quality Checks') {
            // Example: static code analysis
            sh 'mvn checkstyle:check'
        }

        stage('Deploy') {
            // Deploy only if build & tests succeed
            sh '''
                echo "Deploying ${APP_NAME}..."
                # Example: copy JAR to deployment server
                scp target/*.jar user@server:/opt/apps/
            '''
        }
    }
    catch (err) {
        // Handle failures gracefully
        currentBuild.result = 'FAILURE'
        echo "‚ùå Pipeline failed: ${err}"
        throw err
    }
    finally {
        stage('Post Actions') {
            // Always run, even if build fails
            echo "Cleaning up workspace..."
            deleteDir()

            // Notify team (Slack, email, etc.)
            emailext (
                subject: "Jenkins Build: ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                body: "Check console output at ${env.BUILD_URL}",
                to: "dev-team@example.com"
            )
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------

                            JENKINS PLUGINS IF DELETED


IF IN CASE ANYTHING DELETED JENKINS PLUGINS , HOW TO RECOVER.!



Perfect ‚Äî that‚Äôs very helpful information üëç
If you deleted some Jenkins plugins manually (especially from /var/lib/jenkins/plugins/ or /var/lib/jenkins/plugins.bak/), then yes ‚Äî this is almost certainly why Jenkins UI is now blank / reset and the service fails to restart.
When Jenkins starts, it checks all required plugins listed in your jobs and global configuration.
If even one required plugin‚Äôs .jpi or .hpi file is missing or half-deleted, Jenkins startup will fail or run with a partial configuration, which is exactly what you‚Äôre seeing (‚ÄúWelcome to Jenkins!‚Äù ‚Äî as if it‚Äôs a fresh install).

üß© Step-by-step fix
1Ô∏è‚É£ Check Jenkins logs for missing plugins
Run:
sudo tail -n 50 /var/log/jenkins/jenkins.log

and look for lines like:
SEVERE: Failed Loading plugin xyz
java.io.IOException: dependency not found ...

That will show which plugin(s) are missing or corrupted.

2Ô∏è‚É£ Check what plugins remain
Run:
ls -l /var/lib/jenkins/plugins | wc -l
ls -l /var/lib/jenkins/plugins | head

If this folder is almost empty (or missing key .jpi files), Jenkins will fail to load existing jobs and pipelines.

3Ô∏è‚É£ Restore plugins from backup
You‚Äôre lucky ‚Äî your earlier listing showed this üëá
drwxr-xr-x. 97 jenkins jenkins 16384 Oct 22 17:20 plugins.bak

So you have a complete backup folder!
You can restore them like this:
sudo systemctl stop jenkins
sudo rm -rf /var/lib/jenkins/plugins
sudo cp -r /var/lib/jenkins/plugins.bak /var/lib/jenkins/plugins
sudo chown -R jenkins:jenkins /var/lib/jenkins/plugins
sudo systemctl start jenkins

Then open Jenkins in browser again (http://<your-public-ip>:8080).

4Ô∏è‚É£ If it still fails to start
Run these commands and share the result:
sudo tail -n 30 /var/log/jenkins/jenkins.log
sudo systemctl status jenkins -l

That will confirm whether Jenkins is crashing because of plugin dependencies, config corruption, or version mismatch.

Would you like me to walk you through restoring only the missing plugins instead of copying the full backup folder? (safer if you recently updated some plugins).




